import numpy as np
import pandas as pd
import os
import random
import matplotlib.pylab as plt
from sklearn.preprocessing import StandardScaler
from numpy.linalg import eig

def gaussian_distance_weights(pointcloud):
    # Calucalate median
    median = np.median(pointcloud, axis=0)

    # Calculate euclidian distance to median
    median_dis = np.sum((pointcloud - median) ** 2, axis=1) ** (1/2)
    
    # Standard deviation = 0.5 (empirical observation)
    std_dev = 0.5

    # Calculate gaussian distance
    gaussian_dis = (1 / (math.sqrt(std_dev) * math.sqrt(2 * math.pi))) ** ((median_dis ** 2) / 2 * std_dev)

    # Calculate normalized weights
    weights = gaussian_dis / np.linalg.norm(gaussian_dis)

    # Returns an integer between 0 and 100 as weight for each point
    return np.uint8(weights * 100)

# Calculate the eigenvalues and eigenvalues based on weighted covariance matrix
def eigenvalues_vectors(pointcloud, weights):
    # Transform data to origin
    scaler = StandardScaler()
    scaled_data = scaler.fit_transform(pointcloud)

    """"
    Convariance matrix accurater te maken
    """

    cov_matrix = np.cov(scaled_data.T, fweights=weights)

    eigenvalues, eigenvectors = eig(cov_matrix)
    eigenvalues[::-1].sort()
    eigenvectors[::-1].sort()

    return eigenvalues, eigenvectors

def average_width(data, k_split):
    
    min = np.min(data['z'])
    height_diff = np.max(data['z']) - min

    norm = height_diff / k_split

    data = data.values

    results = np.array([])
    for i in range(k_split):
        try:
            temp_data = data[(data[:, 2] < min + (i+1) * norm)  & (data[:, 2] > min + i * norm)]

            x_range = np.max(temp_data[:, 0]) - np.min(temp_data[:, 0])
            y_range = np.max(temp_data[:, 1]) - np.min(temp_data[:, 1])

            res = max(x_range, y_range)
            results = np.append(results, res)

        except ValueError:
            # No points in this z domain
            pass
    
    return np.mean(results)

# Visualize a specific feature on the data
if __name__ == '__main__':
    directory = './code/data'

    # 000 - 099: building;
    # 100 - 199: car;
    # 200 - 299: fence;
    # 300 - 399: pole;
    # 400 - 499: tree.

    x = 0
    y = 500
    feature = 'sphericity'

    results = []
    for i, file in enumerate(os.listdir(directory)[:y-x]):
        print(i)
        filename = os.path.join(directory, file)
        data = pd.read_table(filename, skiprows=0, delim_whitespace=True,
                                        names=['x', 'y', 'z'])
    
        results.append(average_width(data, 10))

    results = np.clip(np.array(results), 0, 30)
    frame = np.array([range(y-x), results])

    res = pd.DataFrame(frame.T, columns=['Object_idx', feature])
    
    colors = ['green', 'yellow', 'red', 'blue', 'orange', 'black']
    color_selection = []

    for i in range((y-x) // 100):
        color = colors[i]
        for i in range(100):
            color_selection.append(color)

    res.plot(kind='scatter', x='Object_idx', y=feature, color=color_selection)
    plt.show()